***
Export declarations are not subject to temporal dead zone rules

The export default syntax allows any expression.
> export default 1 + 1;
As a special case, functions and classes are exported as declarations, not expressions,
and these declarations can be anonymous. This means functions will be hoisted.
```
export default function () {
  console.log("Hi");
}
```

A module can also "relay" values exported from other modules without the hassle of writing two separate import/export statements.
‍‍> export { default as function1, function2 } from "bar.js";
= (equals to)
> import { default as function1, function2 } from "bar.js";
> export { function1, function2 };

There is also `export * from "mod"`, although there's no `import * from "mod"`.
If there are two wildcard exports statements that implicitly re-export the same name, neither one is re-exported.
```
// -- mod1.js --
export const a = 1;

// -- mod2.js --
export const a = 3;

// -- barrel.js --
export * from "./mod1.js";
export * from "./mod2.js";

// -- main.js --
import * as ns from "./barrel.js";
console.log(ns.a); // undefined
import { a } from "./barrel.js"; // error
```

> export DefaultExport from "bar.js"; // Invalid
> export { default as DefaultExport } from "bar.js" // Valid


*** Import attributes
> import { names } from "module-name" with { key: "data", key2: "data2" };
> import data from "https://example.com/data.json" with { type: "json" };
